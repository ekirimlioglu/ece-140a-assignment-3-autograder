#!/usr/bin/env bash

# Exit if any command fails
# set -e

# Copy student's files from submission directory to source directory
cp -r /autograder/submission/* /autograder/source/

cd /autograder/source

touch /autograder/source/fastapi.log

# Start FastAPI server in the background
# Assuming their main FastAPI file is called app.py or main.py
# We'll try both common filenames
if [ -f "app.py" ]; then
    # send all output to fastapi.log
    python3 app.py > /autograder/source/fastapi.log 2>&1 &
	SERVER_PID=$!
	echo "Server put in the background with PID=${SERVER_PID}"
else
    echo "You did not pass the sanity check. Here are the logs:"
    cat /autograder/source/fastapi.log
    # find a way to pass the log on to the test output in a 0/0 score test
    # Create results.json with a single failing test
    cat > /autograder/results/results.json << EOL
{
    "tests": [
        {
            "name": "You did not pass the sanity check, your server failed to start. Here are the logs:",
            "score": 0,
            "max_score": 0,
            "status": "failed", 
            "output": "$(cat /autograder/source/fastapi.log)"
        }
    ],
    "leaderboard": [],
    "visibility": "visible",
    "execution_time": "0",
    "score": 0
}
EOL
    exit 0
fi


# Wait for server to be ready (checks /docs endpoint)
for i in {1..30}; do
    if curl -s http://localhost:6543/docs > /dev/null; then
        break
    fi
    sleep 1
    if [ $i -eq 30 ]; then
    cat > /autograder/results/results.json << EOL
{
    "tests": [
        {
            "name": "You did not pass the sanity check, your server failed to start. Here are the logs:",
            "score": 0,
            "max_score": 0,
            "status": "failed", 
            "output": "$(cat /autograder/source/fastapi.log)"
        }
    ],
    "leaderboard": [],
    "visibility": "visible",
    "execution_time": "0",
    "score": 0
}
EOL
    exit 0
    fi
done

# Run the tests and save results
python3 test_main.py
# python3 -m pytest test_*.py --json-report --json-report-file=/autograder/results/pytests.json

# Kill the FastAPI server
kill $SERVER_PID

# echo "Converting results to GradeScope format"

# # Convert pytest JSON to Gradescope format
# python3 convert_results.py
